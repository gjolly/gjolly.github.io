<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gauthier Jolly</title><link>/</link><description>Recent content on Gauthier Jolly</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 13 Nov 2022 09:10:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>FDE, Secureboot and unified kernel image</title><link>/blog/unified_kernel_sb/</link><pubDate>Sun, 13 Nov 2022 09:10:00 +0000</pubDate><guid>/blog/unified_kernel_sb/</guid><description>Full Disk Encryption, Secureboot and Unified Kernel Image FDE protect your data at rest and Secureboot makes sure what you boot is trusted. But there is a flow.
The flow In order to decrypt the root filesystem, the kernel uses a initial ram disk (initramfs). The initramfs provides an temporary filesystem from which extra kernel modules can be loaded, it also contains a set of scripts used to boot the system including scripts to decrypt the user&amp;rsquo;s root filesystem.</description></item><item><title>Boot Linux without GRUB</title><link>/blog/grub_less/</link><pubDate>Fri, 19 Nov 2021 11:10:00 +0000</pubDate><guid>/blog/grub_less/</guid><description>Boot Linux without GRUB To boot the Linux Kernel, most distro use a bootloader and one of the most popular is GRUB. But did you know you can directly boot the Kernel without using a bootloader?
DISCLAIMER: This is only for fun and learning, I do not advise anyone to do that on their main system. Be safe, use a VM.
VM setup Just a quick recap of what is needed (mostely stolen from powersj&amp;rsquo;s excelent blog post).</description></item><item><title>QEMU cheatsheet</title><link>/blog/qemu_cheatsheet/</link><pubDate>Fri, 19 Nov 2021 11:10:00 +0000</pubDate><guid>/blog/qemu_cheatsheet/</guid><description>QEMU cheatsheet The basics https://powersj.io/posts/ubuntu-qemu-cli/
Mount disk images It is ofter very convenient to mount a FS locally to be able to debug and/or fix a problem with a broken disk.
Pre-requisite to everything: mkdir /tmp/rootfs
To know the format of your disk: qemu-img info disk.img (note that qemu-img can output JSON to automate your stuff)
Raw disk images losetup -f -P disk.img losetup -l | grep -v snap # to find the loop device you just created and yeah those snaps.</description></item><item><title>Firewall, Tailscale and Ubuntu</title><link>/blog/ufw/</link><pubDate>Sun, 14 Nov 2021 13:10:00 +0000</pubDate><guid>/blog/ufw/</guid><description>Firewall, Tailscale and Ubuntu I recently enabled the Firewall on my desktop on Ubuntu. I probably did a quick lookup online to find out that sudo ufw enable was enough to enable it. I entered the command and forgot about it.
$ sudo ufw enable Firewall is active and enabled on system startup Obviously, (and to be honest I was waiting for it), it didn&amp;rsquo;t take long for things to go bad.</description></item><item><title>The UNIX `who` command</title><link>/blog/who/</link><pubDate>Mon, 31 Aug 2020 11:40:00 +0000</pubDate><guid>/blog/who/</guid><description>The who command While working on a completely different project, I started to ask myself how the who command was working under the hood. In the end, I thought it was a good topic for a blog post.
Who is who Let&amp;rsquo;s start with the basics. the who command allows you to list the users currently logged on the system. For example, on my machine:
$ who gauthier tty2 2020-08-30 15:06 (tty2) gauthier pts/1 2020-08-30 15:06 (tmux(1555).</description></item></channel></rss>